name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]   # PR 建立、更新、重新開啟時觸發

permissions:
  pull-requests: write   # 允許貼 PR comment
  issues: write          # (PR comment 實際上走 issues API)
  contents: read         # 允許讀取 diff/檔案

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4   # 取出 PR 原始碼

      - name: Load Prompt           # 讀取審查規則 prompt 檔案 (外部抽離)
        id: prompt
        run: |
          PROMPT=$(cat .github/ai-review-prompt.txt | jq -Rs .)   # jq -Rs -> 轉成合法 JSON 字串
          echo "PROMPT=$PROMPT" >> $GITHUB_OUTPUT                 # 輸出到 steps 供後續引用

      - name: Generate diff         # 產生此次 PR 的差異內容
        run: |
          git fetch origin ${{ github.base_ref }}                 # 更新 base branch
          git diff origin/${{ github.base_ref }} --unified=3 > diff.patch   # 產生 unified diff

      - name: Call ChatGPT          # 呼叫 OpenAI API 審查 diff
        id: ai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}           # 從 Secret 讀取 API key
        run: |
          SYS=${{ steps.prompt.outputs.PROMPT }}                  # 系統 prompt (審查規則)
          DIFF=$(jq -Rs . diff.patch)                             # 將 diff 轉成 JSON string

          # 用 jq -n 組合法 JSON -> 避免 heredoc/quote 破 JSON
          JSON=$(jq -n \
            --argjson sys "$SYS" \
            --argjson diff "$DIFF" \
            '{
              model: "gpt-4o-mini",
              messages: [
                {role:"system", content:$sys},                    # 指令規範
                {role:"user", content:"以下為本次 PR diff，請開始審查："}, # 引導文字
                {role:"user", content:$diff}                     # diff 內容本體
              ]
            }'
          )

          # 呼叫 OpenAI Chat Completions API
          resp=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$JSON")

          echo "=== RAW RESPONSE ==="     # debug 時能看到完整 JSON 回應
          echo "$resp"

          content=$(echo "$resp" | jq -r '.choices[0].message.content // empty')  # 抓 AI 審查文字

          # AI 若沒回內容，視為錯誤
          if [ -z "$content" ]; then
            err=$(echo "$resp" | jq -r '.error.message // "OpenAI API Error"')
            echo "REVIEW<<EOF" >> $GITHUB_OUTPUT
            echo "$err" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          fi

          # 將審查內容輸出讓下一步貼回 PR
          echo "REVIEW<<EOF" >> $GITHUB_OUTPUT
          echo "$content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Add Comment to PR      # 將 AI 回覆貼成 PR 的留言
        if: always()                 # 上面就算失敗也會執行 (錯誤訊息也會貼)
        uses: actions/github-script@v7
        env:
          REVIEW: ${{ steps.ai.outputs.REVIEW }}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,  # 當前 PR 編號
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.REVIEW             # 審查內容貼入 PR 留言
            })
