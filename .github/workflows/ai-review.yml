name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Load Prompt
        id: prompt
        run: |
          PROMPT=$(cat .github/ai-review-prompt.txt | jq -Rs .)
          echo "PROMPT=$PROMPT" >> $GITHUB_OUTPUT

      - name: Generate diff
        run: |
          git fetch origin ${{ github.base_ref }}
          git diff origin/${{ github.base_ref }} --unified=3 > diff.patch

      - name: Call ChatGPT
        id: ai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          PROMPT=${{ steps.prompt.outputs.PROMPT }}
          DIFF=$(jq -Rs . diff.patch)

          JSON=$(cat <<EOF
{
  "model": "gpt-4o-mini",
  "messages": [
    { "role": "system", "content": $PROMPT },
    { "role": "user", "content": "以下為本次 PR diff，請開始審查：\n\n$DIFF" }
  ]
}
EOF
)

          resp=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$JSON")

          echo "=== RAW RESPONSE ==="
          echo "$resp"

          content=$(echo "$resp" | jq -r '.choices[0].message.content // empty')
          if [ -z "$content" ]; then
            err=$(echo "$resp" | jq -r '.error.message // "OpenAI API Error"')
            echo "REVIEW<<EOF" >> $GITHUB_OUTPUT
            echo "$err" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "REVIEW<<EOF" >> $GITHUB_OUTPUT
          echo "$content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Add Comment to PR
        if: always()
        uses: actions/github-script@v7
        env:
          REVIEW: ${{ steps.ai.outputs.REVIEW }}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.REVIEW
            })
