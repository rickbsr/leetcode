name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout PR 內容
      - uses: actions/checkout@v4

      # 2) 產生本次 PR 的 diff
      - name: Generate diff
        run: |
          git fetch origin ${{ github.base_ref }}
          git diff origin/${{ github.base_ref }} --unified=3 > diff.patch

      # 3) 呼叫 OpenAI 進行審查
      - name: Call ChatGPT
        id: ai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          body=$(sed 's/"/\\"/g' diff.patch)

          resp=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"model\": \"gpt-4o-mini\",
              \"messages\": [
                {\"role\": \"system\", \"content\": \"你是一名資深 Java Reviewer ... 依 A/B/C/D 審查 ... 若無問題需明確寫無明顯問題...\"},
                {\"role\": \"user\",\"content\": \"以下為本次 PR diff，請開始審查：\\n\\n$body\"}
              ]
            }")

          echo "=== RAW RESPONSE ==="
          echo "$resp"

          # 嘗試取出 AI 結果
          content=$(echo "$resp" | jq -r '.choices[0].message.content // empty')

          if [ -z "$content" ]; then
            err=$(echo "$resp" | jq -r '.error.message // "Unknown Error"')
            echo "REVIEW<<EOF" >> $GITHUB_OUTPUT
            echo "$err" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          fi

          # 若 AI 認定四大項皆無問題時改成固定訊息
          normalized=$(echo "$content" | tr -d '[:space:]')
          if [[ "$normalized" == "" ]]; then
            content="此 PR 未發現明顯問題 ✅"
          fi

          echo "REVIEW<<EOF" >> $GITHUB_OUTPUT
          echo "$content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 4) 將 AI 結果或錯誤回覆貼回 PR
      - name: Add Comment to PR
        if: always()
        uses: actions/github-script@v7
        env:
          REVIEW: ${{ steps.ai.outputs.REVIEW }}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.REVIEW
            })
